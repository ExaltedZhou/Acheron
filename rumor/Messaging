import Foundation
import CloudKit

class MessageService {
    static let shared = MessageService()

    private let baseURL = URL(string: "http://your-api-base-url.com")! // Replace with your actual API base URL

    func sendMessage(message: String, completion: @escaping (Result<Message, Error>) -> Void) {
        let endpoint = baseURL.appendingPathComponent("messages")

        guard let url = URL(string: endpoint.absoluteString) else {
            completion(.failure(NSError(domain: "Invalid URL", code: 0, userInfo: nil)))
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")

        let parameters: [String: Any] = ["content": message]

        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: parameters)
        } catch {
            completion(.failure(error))
            return
        }

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "No data received", code: 1, userInfo: nil)))
                return
            }

            do {
                let decodedMessage = try JSONDecoder().decode(Message.self, from: data)
                completion(.success(decodedMessage))
            } catch {
                completion(.failure(error))
            }
        }

        task.resume()
    }

    func getMessages(conversationId: String, completion: @escaping (Result<[Message], Error>) -> Void) {
        let endpoint = baseURL.appendingPathComponent("messages/\(conversationId)")

        guard let url = URL(string: endpoint.absoluteString) else {
            completion(.failure(NSError(domain: "Invalid URL", code: 0, userInfo: nil)))
            return
        }

        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "No data received", code: 1, userInfo: nil)))
                return
            }

            do {
                let decodedMessages = try JSONDecoder().decode([Message].self, from: data)
                completion(.success(decodedMessages))
            } catch {
                completion(.failure(error))
            }
        }

        task.resume()
    }
}

/*

Try if above code doesn't wprk

class MessageService {
    static let shared = MessageService()

    private let baseURL = URL(string: "http://your-api-base-url.com")! // Replace with your actual API base URL

    func sendMessage(message: String, completion: @escaping (Result<String, Error>) -> Void) {
        let endpoint = baseURL.appendingPathComponent("messages")

        guard let url = URL(string: endpoint.absoluteString) else {
            completion(.failure(NSError(domain: "Invalid URL", code: 0, userInfo: nil)))
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.addValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")

        let parameters = ["content": message]

        let body = parameters.map { "\($0.key)=\($0.value)" }.joined(separator: "&")
        request.httpBody = body.data(using: .utf8)

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "No data received", code: 1, userInfo: nil)))
                return
            }

            if let responseString = String(data: data, encoding: .utf8) {
                completion(.success(responseString))
            } else {
                completion(.failure(NSError(domain: "Failed to decode response", code: 2, userInfo: nil)))
            }
        }

        task.resume()
    }

    func getMessages(conversationId: String, completion: @escaping (Result<String, Error>) -> Void) {
        let endpoint = baseURL.appendingPathComponent("messages/\(conversationId)")

        guard let url = URL(string: endpoint.absoluteString) else {
            completion(.failure(NSError(domain: "Invalid URL", code: 0, userInfo: nil)))
            return
        }

        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "No data received", code: 1, userInfo: nil)))
                return
            }

            if let responseString = String(data: data, encoding: .utf8) {
                completion(.success(responseString))
            } else {
                completion(.failure(NSError(domain: "Failed to decode response", code: 2, userInfo: nil)))
            }
        }

        task.resume()
    }
}*/ 